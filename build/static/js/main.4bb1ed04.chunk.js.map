{"version":3,"sources":["util.js","Community.js","Equipping.js","Events.js","App.js","serviceWorker.js","index.js"],"names":["fetchData","a","fetch","headers","Authorization","res","json","then","result","catch","err","success","Community","useState","data","classes","setClasses","getClasses","classData","useEffect","community","_","sortBy","filter","e","relationships","group_type","id","className","style","position","map","card","target","rel","href","kebabCase","attributes","name","src","header_image","medium","enrollment_open","data-css-z6vvyp","schedule","Equipping","checked","setChecked","equipping","padding","type","onChange","htmlFor","setErrors","public_url","logo_url","registration_state","event_time","App","require","createBrowserHistory","basename","path","Events","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.4bb1ed04.chunk.js","sourcesContent":["export async function fetchData() {\n  const res = await fetch(\n    'https://api.planningcenteronline.com/groups/v2/groups?per_page=100',\n    {\n      headers: {\n        Authorization:\n          'Basic ZTM1NTliNjhhMjVhN2Y5MDk4YTY0ODQ1ZGEzMTNmNWRkNjRhZjY2Yzg2YzIwNTU3MzQ5ZGI5ZGNkMTQ2Njk2NTozNDNmYTgzZTE1OWI5MjJlZjA5MjdjZWM3YzJkZWFmNmIzYzg1NGM5NzZhMGQ5ZjliZjBmZmNhOWZhMDI5MDZk'\n      }\n    }\n  )\n\n  return (\n    res\n      .json()\n      .then(result => result)\n      // .then(res => {\n      //   fs.writeFile('data.json', JSON.stringify(res, null, 2), 'utf8', function(\n      //     err\n      //   ) {\n      //     if (err) {\n      //       console.log(\n      //         'Some error occured - file either not saved or corrupted file saved.'\n      //       )\n      //     } else {\n      //       console.log(\"It's saved!\")\n      //     }\n      //   })\n      // })\n      .catch(err => ({ success: false, err }))\n  )\n}\n","import _ from 'lodash'\nimport React, { useEffect, useState } from 'react'\nimport './App.css'\nimport data from './data.json'\nimport { fetchData } from './util'\n\nfunction Community() {\n  const [classes, setClasses] = useState(data)\n\n  const getClasses = async () => {\n    const classData = await fetchData()\n    if (classData) setClasses(classData)\n  }\n  useEffect(() => {\n    getClasses()\n  }, [])\n\n  const community = _.sortBy(\n    classes.data.filter(\n      e => e.relationships && e.relationships.group_type.data.id === '90553'\n    ),\n    'attributes.name'\n  )\n  return (\n    <div\n      className=\"w-100% table-loading-overlay\"\n      style={{ position: 'relative' }}\n    >\n      <div>\n        <section className=\"card-list\">\n          {community.map(card => (\n            <article className=\"card-list__item\">\n              <a\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                href={`https://citybiblechurch.churchcenter.com/groups/community-groups/${_.kebabCase(\n                  card.attributes.name\n                )}`}\n                className=\"d-b\"\n              >\n                <div className=\"card-list-item__image\">\n                  <img src={card.attributes.header_image.medium} />\n                </div>\n                <div className=\"d-f jc-sb ai-fs\">\n                  <h1 className=\"pr-1 fs-3 mb-0 lh-1.25 card-list-item__title\">\n                    {card.attributes.name}\n                  </h1>\n                  <span\n                    className={\n                      card.attributes.enrollment_open\n                        ? 'badge ml-1 open-badge'\n                        : 'badge ml-1 closed-badge'\n                    }\n                    data-css-z6vvyp=\"\"\n                  >\n                    {card.attributes.enrollment_open ? 'open' : 'closed'}\n                  </span>\n                </div>\n                <div className=\"c-gray_800 fs-13\">\n                  {card.attributes.schedule}\n                </div>\n              </a>\n            </article>\n          ))}\n        </section>\n      </div>\n    </div>\n  )\n}\n\nexport default Community\n","import _ from 'lodash'\nimport React, { useEffect, useState } from 'react'\nimport './App.css'\nimport data from './data.json'\nimport { fetchData } from './util'\n\nfunction Equipping() {\n  const [classes, setClasses] = useState(data)\n  const [checked, setChecked] = useState(false)\n  const getClasses = async () => {\n    const classData = await fetchData()\n    if (classData) setClasses(classData)\n  }\n  useEffect(() => {\n    getClasses()\n  }, [])\n\n  const equipping = classes.data\n    .filter(\n      e => e.relationships && e.relationships.group_type.data.id === '90554'\n    )\n    .filter(\n      e =>\n        e.attributes.enrollment_open ||\n        e.attributes.enrollment_open === !checked\n    )\n  return (\n    <div\n      className=\"w-100% table-loading-overlay\"\n      style={{ position: 'relative' }}\n    >\n      <div style={{ padding: '30px 0' }}>\n        <input\n          type=\"checkbox\"\n          id=\"enrollment-status\"\n          className=\"checkbox\"\n          checked={checked}\n          onChange={() => setChecked(!checked)}\n        />\n        <label htmlFor=\"enrollment-status\" className=\"checkbox-label\">\n          Include closed &amp; full groups\n        </label>\n      </div>\n      <div>\n        <section className=\"card-list\">\n          {equipping.map(card => (\n            <article className=\"card-list__item\">\n              <a\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                href={`https://citybiblechurch.churchcenter.com/groups/equipping-classes/${_.kebabCase(\n                  card.attributes.name\n                )}`}\n                className=\"d-b\"\n              >\n                <div className=\"card-list-item__image\">\n                  <img src={card.attributes.header_image.medium} />\n                </div>\n                <div className=\"d-f jc-sb ai-fs\">\n                  <h1 className=\"pr-1 fs-3 mb-0 lh-1.25 card-list-item__title\">\n                    {card.attributes.name}\n                  </h1>\n                  <span\n                    className={\n                      card.attributes.enrollment_open\n                        ? 'badge ml-1 open-badge'\n                        : 'badge ml-1 closed-badge'\n                    }\n                    data-css-z6vvyp=\"\"\n                  >\n                    {card.attributes.enrollment_open ? 'open' : 'closed'}\n                  </span>\n                </div>\n                <div className=\"c-gray_800 fs-13\">\n                  {card.attributes.schedule}\n                </div>\n              </a>\n            </article>\n          ))}\n        </section>\n      </div>\n    </div>\n  )\n}\n\nexport default Equipping\n","import React, { useEffect, useState } from 'react'\nimport './App.css'\nimport data from './data.json'\n\nfunction Equipping() {\n  const [classes, setClasses] = useState(data)\n  const [errors, setErrors] = useState(data)\n\n  async function fetchData() {\n    const res = await fetch(\n      'https://api.churchcenter.com/registrations/v2/events?order=starts_at&filter=active,not_hidden&per_page=100',\n      {\n        headers: {\n          Authorization:\n            'OrganizationToken dd9c6a67a03e20362ac8a1aaf7dd909843b64f5adbb16762c19642eb5cef53e0'\n        }\n      }\n    )\n\n    res\n      .json()\n      .then(res => {\n        setClasses(res)\n      })\n      .catch(err => setErrors(err))\n  }\n\n  useEffect(() => {\n    fetchData()\n  }, [])\n\n  const equipping = classes.data\n  return (\n    <div\n      className=\"w-100% table-loading-overlay\"\n      style={{ position: 'relative' }}\n    >\n      <div>\n        <section className=\"card-list\">\n          {equipping.map(card => (\n            <article className=\"card-list__item\">\n              <a\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                href={card.attributes.public_url}\n                className=\"d-b\"\n              >\n                <div className=\"card-list-item__image\">\n                  <img src={card.attributes.logo_url} />\n                </div>\n                <div className=\"d-f jc-sb ai-fs\">\n                  <h1 className=\"pr-1 fs-3 mb-0 lh-1.25 card-list-item__title\">\n                    {card.attributes.name}\n                  </h1>\n                  <span\n                    className={\n                      card.attributes.registration_state === 'open'\n                        ? 'badge ml-1 open-badge'\n                        : 'badge ml-1 closed-badge'\n                    }\n                    data-css-z6vvyp=\"\"\n                  >\n                    {card.attributes.registration_state ? 'open' : 'closed'}\n                  </span>\n                </div>\n                <div className=\"c-gray_800 fs-13\">\n                  {card.attributes.event_time}\n                </div>\n              </a>\n            </article>\n          ))}\n        </section>\n      </div>\n    </div>\n  )\n}\n\nexport default Equipping\n","import createBrowserHistory from 'history/createBrowserHistory'\nimport React, { useState } from 'react'\nimport { HashRouter, Route, Switch } from 'react-router-dom'\nimport Community from './Community'\nimport Equipping from './Equipping'\nimport Events from './Events'\n\nconst fs = require('fs')\n\nconst App = () => {\n  const [hasError, setErrors] = useState(false)\n  const history = createBrowserHistory()\n\n  return (\n    <HashRouter basename=\"/\">\n      <Switch>\n        <Route path=\"/equipping\">\n          <Equipping />\n        </Route>\n        <Route path=\"/community\">\n          <Community />\n        </Route>\n        <Route path=\"/events\">\n          <Events />\n        </Route>\n      </Switch>\n    </HashRouter>\n  )\n}\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}